{"version":3,"sources":["Stores/TodoModel.js","Stores/TodoStore.js","Components/TodoEntry.js","Components/TodoItem.js","Components/TodoItems.js","Components/TodoControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","hidden","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","todoStore","removeItemTodo","observable","action","lastID","todos","push","itemsType","length","hide","filter","item","map","todo","expose","i","TodoEntry","state","value","event","keyCode","preventDefault","addTodo","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","handleKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","_this","props","toggle","remove","concat","checked","class","onClick","TodoItems","Components_TodoItem","TodoControl","counter","forEach","showAllItems","showActiveItems","showCompletedItems","removeCompletedItems","App","Components_TodoEntry","Components_TodoItems","Components_TodoControl","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34d5cb93.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\nimport todoStore from \"../Stores/TodoStore\";\n\nclass TodoModel {\n  store;\n  id;\n  @observable title;\n  @observable completed;\n  @observable hidden;\n\n  constructor(store, title, completed, hidden, id) {\n    this.store = store;\n    this.title = title;\n    this.completed = completed;\n    this.hidden = hidden;\n    this.id = id;\n  }\n\n  @action\n  toggle() {\n    this.completed = !this.completed;\n    // if (!this.completed && todoStore.itemsType === \"completed\")\n    // todoStore.todos[this.id].hide();\n  }\n\n  @action\n  hide() {\n    this.hidden = true;\n  }\n  @action\n  expose() {\n    this.hidden = false;\n  }\n\n  @action\n  remove() {\n    todoStore.removeItemTodo(this.id);\n  }\n}\n\nexport default TodoModel;\n","import { action, observable } from \"mobx\";\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n  @observable todos = [];\n  @observable itemsType = 'all';\n  lastID = 0;\n\n  @action\n  addTodo(title) {\n    this.todos.push(new TodoModel(this, title, false, false, this.lastID++));\n    if (this.itemsType === \"completed\")\n      this.todos[this.todos.length - 1].hide();\n  }\n\n  @action\n  removeItemTodo(id) {\n    this.todos = this.todos.filter(item => item.id != id);\n  }\n\n  @action\n  removeCompletedItems() {\n    this.todos = this.todos.filter(item => item.completed == false);\n  }\n\n  @action\n  showAllItems() {\n    this.itemsType = \"all\";\n    let i = 0;\n    this.todos.map(todo => {\n      todo.hidden ? todo.expose() : i++;\n    });\n  }\n\n  @action\n  showActiveItems() {\n    this.itemsType = \"active\";\n    this.todos.map(todo => {\n      todo.completed ? todo.hide() : todo.expose();\n    });\n  }\n\n  @action\n  showCompletedItems() {\n    this.itemsType = \"completed\";\n    this.todos.map(todo => {\n      !todo.completed ? todo.hide() : todo.expose();\n    });\n  }\n}\n\nconst store = new TodoStore();\nexport default store;\n","import React, { Component } from \"react\";\nimport todoStore from '../Stores/TodoStore'\n\nclass TodoEntry extends Component {\n  state = {\n    value : ''\n  }\n\n  handleKeyDown(event){\n    if(event.keyCode != 13)\n      return\n    \n    event.preventDefault()\n    todoStore.addTodo(this.state.value)\n    this.setState({\n      value: ''\n    })\n    \n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todo</h1>\n        <input\n          value={this.state.value}\n          onChange={event => this.setState({value : event.target.value})}\n          onKeyDown={event => this.handleKeyDown(event)}\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n    );\n  }\n}\n\nexport default TodoEntry;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport todoStore from \"../Stores/TodoStore\";\n\n@observer\nclass TodoItem extends Component {\n  onToggle = () => {\n    this.props.todo.toggle();\n  };\n  removeItemTodo = () => {\n    this.props.todo.remove();\n  };\n  render() {\n    let { todo } = this.props;\n    return (\n      <li\n        className={\n          `${todo.completed ? \"completed\" : \"\"} ` +\n          ` ${todo.hidden ? \"hidden\" : \"\"}`\n        }\n      >\n        <div className=\"view\">\n          <input\n            onChange={this.onToggle}\n            type=\"checkbox\"\n            className=\"toggle\"\n            value=\"on\"\n            checked={todo.completed}\n          />\n          <label>{todo.title} </label>\n          <button class=\"destroy\" onClick={this.removeItemTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport todoStore from \"../Stores/TodoStore\";\nimport { observer } from \"mobx-react\";\n\n@observer\nclass TodoItems extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {todoStore.todos.map(todo => {\n            return <TodoItem todo={todo} />;\n          })}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport todoStore from \"../Stores/TodoStore\";\n\n@observer\nclass TodoControl extends Component {\n  render() {\n    let counter = 0;\n    todoStore.todos.forEach(item => {\n      if (!item.completed) {\n        counter++;\n      }\n    });\n    if (todoStore.todos.length > 0) {\n      return (\n        <footer className=\"footer\">\n          <div className=\"todo-count\">\n            {counter === 0\n              ? \"\"\n              : counter === 1\n              ? counter + \" item left\"\n              : counter + \" items left\"}\n          </div>\n          <ul className=\"filters\">\n            <li>\n              <button\n                className={todoStore.itemsType === \"all\" ? \"selected\" : \"\"}\n                onClick={() => todoStore.showAllItems()}\n              >\n                All\n              </button>\n            </li>\n            <li>\n              <button\n                className={todoStore.itemsType === \"active\" ? \"selected\" : \"\"}\n                onClick={() => todoStore.showActiveItems()}\n              >\n                Active\n              </button>\n            </li>\n            <li>\n              <button\n                className={\n                  todoStore.itemsType === \"completed\" ? \"selected\" : \"\"\n                }\n                onClick={() => todoStore.showCompletedItems()}\n              >\n                Completed\n              </button>\n            </li>\n          </ul>\n          <button\n            className=\"clear-completed\"\n            onClick={() => {\n              todoStore.removeCompletedItems();\n            }}\n          >\n            Clear completed\n          </button>\n        </footer>\n      );\n    } else {\n      return \"\";\n    }\n  }\n}\n\nexport default TodoControl;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoEntry from \"./Components/TodoEntry\";\nimport TodoItems from \"./Components/TodoItems\";\nimport TodoControl from \"./Components/TodoControl\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItems />\n        <TodoControl />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}